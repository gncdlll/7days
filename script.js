const products = [
  { id: 1, name: "–ê–∫–≤–∞—Ä–µ–ª—å", price: 350, category: "–∫—Ä–∞—Å–∫–∏", image: "img/–∞–∫–≤–∞.jpg"  },
  { id: 2, name: "–ú–∞—Å–ª—è–Ω—ã–µ –∫—Ä–∞—Å–∫–∏", price: 500, category: "–∫—Ä–∞—Å–∫–∏", image: "img/masl.jpg" },
  { id: 3, name: "–¶–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä–∞–Ω–¥–∞—à–∏", price: 200, category: "–∫–∞—Ä–∞–Ω–¥–∞—à–∏", image: "img/car.jpg" },
  { id: 4, name: "–ê–ª—å–±–æ–º –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è", price: 150, category: "–±—É–º–∞–≥–∞", image: "img/fenix.jpg" },
  { id: 5, name: "–ü–∞—Å—Ç–µ–ª—å", price: 400, category: "–∫–∞—Ä–∞–Ω–¥–∞—à–∏", image: "img/acva-color.jpg" },
  { id: 6, name: "–ê–∫—Ä–∏–ª–æ–≤–∞—è –∫—Ä–∞—Å–∫–∞'–õ–∞–¥–æ–≥–∞'", price: 245, category: "–∫—Ä–∞—Å–∫–∏", image: "img/–∞–∫—Ä.jpg" },
  { id: 7, name: "–¶–≤–µ—Ç–Ω–∞—è –±—É–º–∞–≥–∞''–õ–µ–æ", price: 49, category: "–±—É–º–∞–≥–∞", image: "img/–±—É–º.jpg" },
  { id: 8, name: "'KOH-I-NOOR Hardtmuth' –ö–∞—Ä–∞–Ω–¥–∞—à —á–µ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π 1500 –∑–∞—Ç–æ—á–µ–Ω–Ω—ã–π", price: 89, category: "–∫–∞—Ä–∞–Ω–¥–∞—à–∏", image: "img/–≥—Ä–∞—Ñ.jpg" },
  { id: 9, name: "–ö—Ä–∞—Å–∫–∞ –≥—É–∞—à—å 'VISTA-ARTISTA'", price: 889, category: "–∫—Ä–∞—Å–∫–∏", image: "img/–≥—É–∞—à.jpg" },
  { id: 10, name: "'VISTA-ARTISTA'–ß–µ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—Ç–Ω—ã–π –∫–∞—Ä–∞–Ω–¥–∞—à", price: 49, category: "–∫–∞—Ä–∞–Ω–¥–∞—à–∏", image: "img/–∫–∞—Ä.jpg" },
  { id: 11, name: "'–°–æ–Ω–µ—Ç'–ì—É–∞—à—å —Ü–≤–µ—Ç–Ω–∞—è", price: 1050, category: "–∫—Ä–∞—Å–∫–∏", image: "img/—Å–æ–Ω–µ—Ç.jpg" },
  { id: 12, name: "–¢–µ—Ç—Ä–∞–¥—å —É—á–µ–±–Ω–∞—è 12–ª–∏—Å—Ç", price: 16, category: "–±—É–º–∞–≥–∞", image: "img/—Ç–µ—Ç—Ä.jpg" },
  { id: 13, name: "–ö–∞—Ä—Ç–æ–Ω —Ü–≤–µ—Ç–Ω–æ–π '–õ–µ–æ'", price: 277, category: "–±—É–º–∞–≥–∞", image: "img/—Ü–≤.jpg" },
  { id: 14, name: "–ö–∞—Ä–∞–Ω–¥–∞—à–∏ –ê–∫–≤–∞—Ä–µ–ª—å–Ω—ã–µ", price: 569, category: "–∫–∞—Ä–∞–Ω–¥–∞—à–∏", image: "img/—Ü–≤–µ—Ç.jpg" },
];

let cart = getCart();

const productList = document.getElementById("product-list");
const cartItems = document.getElementById("cart-items");
const cartCount = document.getElementById("cart-count");
const cartTotal = document.getElementById("cart-total");
const searchInput = document.getElementById("search");
const categoryFilter = document.getElementById("categoryFilter");
const sortFilter = document.getElementById("sortFilter");
const viewToggle = document.getElementById("viewToggle");
const mainContainer = document.getElementById("product-list");

let currentView = "grid";
let currentSort = "default";

function getCart() {
return JSON.parse(localStorage.getItem("cart")) || [];
}

function saveCart(cart) {
localStorage.setItem("cart", JSON.stringify(cart));
}

function renderProducts(filter = "all", search = "") {
productList.innerHTML = "";

let filtered = products.filter(p =>
  (filter === "all" || p.category === filter) &&
  p.name.toLowerCase().includes(search.toLowerCase())
);

// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
if (currentSort === "asc") {
  filtered.sort((a, b) => a.price - b.price);
} else if (currentSort === "desc") {
  filtered.sort((a, b) => b.price - a.price);
}

// –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∞
productList.className = currentView + "-view";

filtered.forEach(p => {
  const card = document.createElement("div");
  card.className = "product";
  card.innerHTML = `
    <a href="product.html?id=${p.id}">
      <img src="${p.image}" alt="${p.name}" class="product-img" />
    </a>
    <h3>${p.name}</h3>
    <p>–¶–µ–Ω–∞: ${p.price}‚ÇΩ</p>
    <button onclick="addToCart(${p.id})">–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
  `;
  productList.appendChild(card);
});
}

function addToCart(id) {
const product = products.find(p => p.id === id);
cart.push(product);
saveCart(cart);
updateCart();
}

function updateCart() {
if (!cartItems || !cartCount || !cartTotal) return;
cartItems.innerHTML = "";
let total = 0;
cart.forEach((item, index) => {
  total += item.price;
  const li = document.createElement("li");
  li.innerHTML = `${item.name} - ${item.price}‚ÇΩ <button onclick="removeFromCart(${index})">√ó</button>`;
  cartItems.appendChild(li);
});
cartCount.textContent = cart.length;
cartTotal.textContent = `${total}‚ÇΩ`;
}

function removeFromCart(index) {
cart.splice(index, 1);
saveCart(cart);
updateCart();
}

function toggleCart() {
document.getElementById("cart").classList.toggle("hidden");
}

function checkout() {
if (cart.length === 0) {
  showNotification("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!");
  return;
}
showNotification("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚ù§Ô∏è");
cart = [];
saveCart(cart);
updateCart();
toggleCart();
}

if (searchInput) {
searchInput.addEventListener("input", () => {
  renderProducts(categoryFilter.value, searchInput.value);
});
}

if (categoryFilter) {
categoryFilter.addEventListener("change", () => {
  renderProducts(categoryFilter.value, searchInput.value);
});
}

if (sortFilter) {
sortFilter.addEventListener("change", () => {
  currentSort = sortFilter.value;
  renderProducts(categoryFilter.value, searchInput.value);
});
}

if (viewToggle) {
viewToggle.addEventListener("click", () => {
  currentView = currentView === "grid" ? "list" : "grid";
  viewToggle.textContent = currentView === "grid" ? "üü¶ –°–µ—Ç–∫–∞" : "üìã –°–ø–∏—Å–æ–∫";
  renderProducts(categoryFilter.value, searchInput.value);
});
}

renderProducts();
updateCart();

  const orderForm = document.getElementById("order-form");

orderForm.addEventListener("submit", function (e) {
  e.preventDefault();

const name = document.getElementById("name").value.trim();
const phone = document.getElementById("phone").value.trim();
const address = document.getElementById("address").value.trim();

if (!name || !phone || !address) {
  showNotification("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
  return;
}

if (cart.length === 0) {
  showNotification("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
  return;
}

fetch("send_order.php", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    name,
    phone,
    address,
    cart,
  }),
})
  .then((res) => res.json())
  .then((data) => {
    if (data.success) {
      showNotification("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
      cart = [];
      saveCart(cart);
      updateCart();
      orderForm.reset();
      toggleCart();
    } else {
      showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.");
    }
  })
  .catch(() => {
    showNotification("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.");
  });


  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ email
  console.log("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω:");
  console.log("–ò–º—è:", name);
  console.log("–¢–µ–ª–µ—Ñ–æ–Ω:", phone);
  console.log("–ê–¥—Ä–µ—Å:", address);
  console.log("–¢–æ–≤–∞—Ä—ã:", cart);

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
  cart = [];
  saveCart(cart);
  updateCart();
  orderForm.reset();
  toggleCart();
  showNotification("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.");
});

  function showNotification(message, duration = 3000) {
    const notif = document.getElementById("notification");
    notif.textContent = message;
    notif.classList.remove("hidden");
    notif.classList.add("show");
  
    setTimeout(() => {
      notif.classList.remove("show");
      notif.classList.add("hidden");
    }, duration);
  }
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
function getCart() {
  return JSON.parse(localStorage.getItem("cart")) || [];
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
function saveCart(cart) {
  localStorage.setItem("cart", JSON.stringify(cart));
}

if (sortFilter) {
  sortFilter.addEventListener("change", () => {
    currentSort = sortFilter.value;
    renderProducts(categoryFilter.value, searchInput.value);
  });
}

if (viewToggle) {
  viewToggle.addEventListener("click", () => {
    currentView = currentView === "grid" ? "list" : "grid";
    mainContainer.className = currentView + "-view";
    viewToggle.textContent = currentView === "grid" ? "üü¶ –°–µ—Ç–∫–∞" : "üìã –°–ø–∏—Å–æ–∫";
  });
}

  
  